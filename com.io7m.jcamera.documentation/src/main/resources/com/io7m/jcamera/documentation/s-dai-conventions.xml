<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright Â© 2021 Mark Raynsford <code@io7m.com> https://www.io7m.com

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted, provided that the above
  copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  -->

<Section xmlns="urn:com.io7m.structural:8:0"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         title="Conventions">

  <Subsection id="fc334be1-4f3c-403c-9958-9c538fe23687"
              title="Overview">
    <Paragraph>
      This section attempts to document the mathematical and typographical conventions used in the rest of the
      documentation.
    </Paragraph>
  </Subsection>

  <Subsection id="c864f73e-c009-4de0-906d-a4b6d17ca8fa"
              title="Architecture">
    <Paragraph>
      The intention here is to first describe a simple purely mathematical rendering-and-input-system-independent
      <Term type="term">camera</Term>
      that can be positioned and oriented, but that does not know anything about integration of its position and
      rotation over time. A separate system (the <Term type="term">integrator</Term>) is built upon this camera that
      provides interpolation of the position and orientation over time to provide configurable smooth animation.
      Finally, a system (the <Term type="term">input</Term>) is described that actually attaches the camera system to a
      keyboard and mouse package. The input package used in the examples is that of
      <LinkExternal target="http://jogamp.org/www/jogl">JOGL</LinkExternal>, but the system is specifically described in
      a manner to allow it to be easily adapted to any other input package. Essentially, the
      <Term type="package">${project.parent.name}</Term>
      package tries to provide a cleanly-separated system-independent core, with the addition of a system to allow it to
      be attached to system-specific keyboard/mouse input packages. This is essential for the correctness of the
      software and also for the actual ease of understanding of the mathematics and implementation
      <LinkFootnote target="b96b6694-4766-49c2-ad70-e6e495afa609"/>.
    </Paragraph>
    <FormalItem type="diagram"
                title="Architecture">
      <Image source="images/system.png">Architecture</Image>
    </FormalItem>
  </Subsection>

  <Subsection id="9cf94fd4-1668-466c-bf03-11158ae09ce9"
              title="Mathematics">
    <Paragraph>
      Rather than rely on untyped and ambiguous mathematical notation, this documentation expresses all mathematics in
      strict
      <LinkExternal target="http://www.haskell.org/onlinereport/haskell2010/">Haskell 2010</LinkExternal>
      with no extensions. All Haskell sources are included along with the documentation and can therefore be executed
      from the command line
      <LinkExternal target="http://www.haskell.org/haskellwiki/GHC/GHCi">GHCi</LinkExternal>
      tool in order to interactively check results and experiment with functions.
    </Paragraph>
    <Paragraph>
      When used within prose, functions are referred to using fully qualified notation, such as
      <Term type="expression">(Vector3f.cross n t)</Term>. This an the application of the <Term type="function">cross
    </Term> function defined in the
      <LinkExternal target="haskell/Vector3f.hs">Vector3f</LinkExternal>
      module, to the arguments <Term type="variable">n</Term> and
      <Term type="variable">t</Term>.
    </Paragraph>
    <Paragraph>
      Formal examples and definitions, however, will typically be defined within their own modules, possibly with import
      statements used to allow for shorter names. As an example [<LinkExternal target="haskell/Forward.hs">
      Forward.hs</LinkExternal>]:
    </Paragraph>
    <FormalItem type="specification"
                title="Forward movement">
      <Verbatim>
        <xi:include href="haskell/Forward.hs"
                    parse="text"/>
      </Verbatim>
    </FormalItem>
  </Subsection>

  <Footnote id="b96b6694-4766-49c2-ad70-e6e495afa609">
    Most camera systems documented (usually in blogs) online either describe only the mathematics and fail to describe
    the intricacies of driving the system with input, or violently mash all of the mathematics into an existing
    assumption-ridden input and rendering system - meaning that the reader has to fully understand an input system or
    rendering system that they may not ever have even seen before just to understand how the camera works.
  </Footnote>

</Section>
