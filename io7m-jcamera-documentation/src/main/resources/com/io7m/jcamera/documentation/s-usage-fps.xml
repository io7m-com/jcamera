<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright Â© 2014 <code@io7m.com> http://io7m.com

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted, provided that the above
  copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  -->

<s:section
  xml:id="usage.fps"
  xmlns:s="http://schemas.io7m.com/structural/2.0.0"
  xmlns:xi="http://www.w3.org/2001/XInclude">
  <s:section-title>First-person camera</s:section-title>
  <s:section-contents/>

  <s:subsection xml:id="usage.fps.overview">
    <s:subsection-title>Overview</s:subsection-title>
    <s:paragraph>
      In order to aid comprehension, and to follow good software engineering
      practices, the usage example here will be developed as a set of types
      with well-defined interfaces. Specifically, a simple main program will
      initialize an OpenGL window with JOGL, and register some keyboard and
      mouse listeners to supply input to a
      <s:term s:type="term">simulation</s:term>, which in turn periodically
      produces new data (a <s:term s:type="term">view matrix</s:term>) for 
      a <s:term s:type="term">renderer</s:term>.
      The <s:term s:type="term">renderer</s:term> draws a simple static scene
      using the view matrix periodically produced by a camera from the
      <s:term s:type="package">${project.parent.name}</s:term> package. The
      <s:term s:type="term">simulation</s:term> runs at a fixed time step
      to provide completely frame rate independent movement (see the article
      <s:link-external s:target="http://gafferongames.com/game-physics/fix-your-timestep/">"Fix Your Timestep!"</s:link-external>
      for details on why physical simulations should use fixed time steps).
      The <s:term s:type="term">renderer</s:term>, however, runs at an arbitrary 
      frame rate. On some systems the frame rate will be exactly equal to the 
      screen's vertical refresh rate, whilst on others, the rate will be 
      thousands of times per second. The desire is to show that the system
      works equally well no matter what frame rate is used, so no attempt
      is made to enforce any particular rate. A rough graph of the data
      flow between components is as follows:
    </s:paragraph>
    <s:formal-item s:kind="diagram">
      <s:formal-item-title>Example data flow</s:formal-item-title>
      <s:image s:source="images/example_dataflow.png">Example data flow</s:image>
    </s:formal-item>
    <s:paragraph>
      JOGL works with an event-based model, where mouse and keyboard input
      causes events to be delivered to mouse and keyboard <s:term s:type="term">listeners</s:term>.
      Additionally, OpenGL rendering typically occurs via an OpenGL
      <s:term s:type="term">listener</s:term>: JOGL (or the GPU, or the operating system, 
      whichever is responsible) indicates that it is time to render the scene, 
      and the user's registered <s:term s:type="term">listener</s:term> is
      executed to actually perform the drawing. It's reasonable to assume that
      input handling and rendering occur on different threads by default, so
      the code here is careful to operate in a thread-safe manner.
    </s:paragraph>
    <s:paragraph>
      The interface exposed to JOGL by the example renderer is as follows
      [<s:link-external s:target="com/io7m/jcamera/examples/jogl/ExampleRendererType.java">ExampleRendererType.java</s:link-external>]:
    </s:paragraph>
    <s:formal-item s:kind="examples">
      <s:formal-item-title>Renderer interface</s:formal-item-title>
      <s:verbatim><xi:include href="com/io7m/jcamera/examples/jogl/ExampleRendererType.java" parse="text"/></s:verbatim>
    </s:formal-item>
    <s:paragraph>
      Little is needed in the way of explanation here. The renderer initializes
      the scene's resources when <s:term s:type="function">init</s:term> is
      called (such as allocating memory on the GPU for mesh data, compiling shaders, etc).
      The renderer draws the scene whenever <s:term s:type="function">draw</s:term> is called,
      and recalculates any internal resources that are dependent on the size
      of the window (such as the scene's <s:term s:type="term">projection matrix</s:term>)
      when <s:term s:type="function">reshape</s:term> is called.
    </s:paragraph>
    <s:paragraph>
      The actual implementation of the renderer is of little interest here. It
      simply draws a hundred or so static quads from the perspective of whatever
      is the current view matrix. The implementation is given in
      <s:link-external s:target="com/io7m/jcamera/examples/jogl/ExampleRenderer.java">ExampleRenderer</s:link-external>
      and will not be referenced again.
    </s:paragraph>
  </s:subsection>

  <s:subsection xml:id="usage.fps.simulation">
    <s:subsection-title>FPS Simulation</s:subsection-title>
    <s:paragraph>
      The interface exposed to JOGL by the example simulation is as follows
      [<s:link-external s:target="com/io7m/jcamera/examples/jogl/ExampleFPSStyleSimulationType.java">ExampleFPSStyleSimulationType.java</s:link-external>]:
    </s:paragraph>
    <s:formal-item s:kind="examples">
      <s:formal-item-title>Simulation interface</s:formal-item-title>
      <s:verbatim><xi:include href="com/io7m/jcamera/examples/jogl/ExampleFPSStyleSimulationType.java" parse="text"/></s:verbatim>
    </s:formal-item>
    <s:paragraph>
      Again, little is needed in the way of explanation. The simulation provides a
      camera that can be enabled and disabled. If the camera is disabled,
      a simple fixed camera is used rather than having the camera be driven by
      keyboard and mouse input.
    </s:paragraph>
    <s:paragraph xml:id="usage.fps.renderer_control">
      The simulation needs a way to periodically warp the mouse cursor to the 
      center of the screen if the movable camera is enabled, so the renderer 
      exposes the following interface to the simulation
      [<s:link-external s:target="com/io7m/jcamera/examples/jogl/ExampleRendererControllerType.java">ExampleRendererControllerType.java</s:link-external>]:
    </s:paragraph>
    <s:formal-item s:kind="examples">
      <s:formal-item-title>Renderer control interface</s:formal-item-title>
      <s:verbatim><xi:include href="com/io7m/jcamera/examples/jogl/ExampleRendererControllerType.java" parse="text"/></s:verbatim>
    </s:formal-item>
    <s:paragraph>
      The actual implementation of the simulation is as follows
      [<s:link-external s:target="com/io7m/jcamera/examples/jogl/ExampleFPSStyleSimulation.java">ExampleFPSStyleSimulation.java</s:link-external>].
      First:
    </s:paragraph>
    <s:formal-item s:kind="examples">
      <s:formal-item-title>Camera declarations and storage</s:formal-item-title>
      <s:verbatim><xi:include href="example-fps-sim-0.txt" parse="text"/></s:verbatim>
    </s:formal-item>
    <s:paragraph>
      Then, an <s:link s:target="dai.fpsstyle.integrators">integrator</s:link> is 
      created to drive the camera, and the integration
      period required for a fixed time step of <s:term s:type="expression">60</s:term> 
      frames per second is calculated:
    </s:paragraph>
    <s:formal-item s:kind="examples">
      <s:formal-item-title>Integrator</s:formal-item-title>
      <s:verbatim><xi:include href="example-fps-sim-1.txt" parse="text"/></s:verbatim>
    </s:formal-item>
    <s:paragraph>
      Finally, to give the camera somewhat more snappy and abrupt behaviour than
      the default settings, some new acceleration and drag values are configured
      for the camera:
    </s:paragraph>
    <s:formal-item s:kind="examples">
      <s:formal-item-title>Acceleration and Drag</s:formal-item-title>
      <s:verbatim><xi:include href="example-fps-sim-2.txt" parse="text"/></s:verbatim>
    </s:formal-item>
    <s:paragraph>
      The <s:term s:type="function">integrate</s:term> function is executed at a
      rate of <s:term s:type="expression">60</s:term> times per second, and
      produces a new snapshot each time, which is passed to the renderer. 
      The immutable nature of the snapshot means that it can be safely shared 
      across threads without any need for locks or other synchronization.
      If the camera is actually enabled, the simulation also instructs the 
      renderer to warp the mouse cursor back to the center of the screen. The
      rest of the functions complete the interface.
    </s:paragraph>
    <s:formal-item s:kind="examples">
      <s:formal-item-title>Integrate</s:formal-item-title>
      <s:verbatim><xi:include href="example-fps-sim-3.txt" parse="text"/></s:verbatim>
    </s:formal-item>
  </s:subsection>

  <s:subsection xml:id="usage.fps.input">
    <s:subsection-title>Input</s:subsection-title>
    <s:paragraph>
      It's now necessary to supply the simulation with input. 
    </s:paragraph>
    <s:paragraph>
      A <s:term s:type="type">KeyListener</s:term> is defined.
      Every time the user presses or releases a key, the simulation camera's
      input is notified accordingly.
    </s:paragraph>
    <s:paragraph>
      There is one main issue covered here: If the user has keyboard
      auto-repeat enabled by their operating system, holding a key will result in
      an endless stream of "key pressed" and "key released" events. The code here
      is only interested in receiving the first "key pressed" and last "key released"
      event for each key, and JOGL's NEWT system marks each event as having been
      produced by auto-repeat (or not). Therefore, the auto-repeat flag is checked
      for each event, and the event is discarded if the flag is set.
    </s:paragraph>
    <s:paragraph>
      Additionally, a few extra definitions allow for showing/hiding the mouse 
      cursor, and switching between windowed and full-screen mode. JOGL requires 
      that the <s:term s:type="function">setFullscreen</s:term> function be called
      on a background thread, rather than the thread handling input and/or
      rendering for the current window.
    </s:paragraph>
    <s:formal-item s:kind="examples">
      <s:formal-item-title>Main (KeyListener)</s:formal-item-title>
      <s:verbatim><xi:include href="com/io7m/jcamera/examples/jogl/ExampleFPSStyleKeyListener.java" parse="text"/></s:verbatim>
    </s:formal-item>
    <s:paragraph>
      A <s:term s:type="type">MouseAdapter</s:term> is defined.
      Every time the user moves the mouse, the rotation coefficients are calculated
      and sent to the simulation camera's input:
    </s:paragraph>
    <s:formal-item s:kind="examples">
      <s:formal-item-title>Main (MouseAdapter)</s:formal-item-title>
      <s:verbatim><xi:include href="com/io7m/jcamera/examples/jogl/ExampleFPSStyleMouseAdapter.java" parse="text"/></s:verbatim>
    </s:formal-item>
  </s:subsection>

  <s:subsection xml:id="usage.fps.gleventlistener">
    <s:subsection-title>Rendering/Interpolation</s:subsection-title>
    <s:paragraph>
      A <s:term s:type="type">GLEventListener</s:term> is added to the window.
      The listener will tell the renderer to draw the scene every time the
      OpenGL implementation requires a new frame.
    </s:paragraph>
    <s:paragraph>
      The <s:term s:type="function">display</s:term> method linearly interpolates
      between the most recently received camera snapshots in order to provide smooth
      animation independent of the simulation and/or frame rate.
    </s:paragraph>
    <s:formal-item s:kind="examples">
      <s:formal-item-title>Main (GLEventListener)</s:formal-item-title>
      <s:verbatim><xi:include href="com/io7m/jcamera/examples/jogl/ExampleFPSStyleGLListener.java" parse="text"/></s:verbatim>
    </s:formal-item>
  </s:subsection>

  <s:subsection xml:id="usage.fps.main">
    <s:subsection-title>Main</s:subsection-title>
    <s:paragraph>
      All that remains is to have JOGL tell the renderer when to render, and
      to supply the simulation with input in order to move and orient the
      camera according to mouse and keyboard input. The main program constructs
      a new renderer:
    </s:paragraph>
    <s:formal-item s:kind="examples">
      <s:formal-item-title>Main (Renderer)</s:formal-item-title>
      <s:verbatim><xi:include href="example-fps-main-0.txt" parse="text"/></s:verbatim>
    </s:formal-item>
    <s:paragraph>
      Then, a new simulation is constructed, and is passed a reference to the renderer
      (the type of the simulation constructor is declared such that it only sees
      a <s:link s:target="usage.fps.renderer_control">small subset</s:link> of
      the interface exposed by the renderer). The simulation camera's input is
      also retrieved:
    </s:paragraph>
    <s:formal-item s:kind="examples">
      <s:formal-item-title>Main (Simulation)</s:formal-item-title>
      <s:verbatim><xi:include href="example-fps-main-1.txt" parse="text"/></s:verbatim>
    </s:formal-item>
    <s:paragraph>
      Some storage is allocated, and a 
      <s:link s:target="dai.fpsstyle.input.mouse_region">mouse region</s:link> is
      created to map mouse movements to rotational coefficients:
    </s:paragraph>
    <s:formal-item s:kind="examples">
      <s:formal-item-title>Main (Mouse region and coefficients)</s:formal-item-title>
      <s:verbatim><xi:include href="example-fps-main-2.txt" parse="text"/></s:verbatim>
    </s:formal-item>
    <s:paragraph>
      An OpenGL window is created, an <s:term s:type="type">Animator</s:term>
      is constructed that will tell the window to refresh frequently, and
      the previously defined listeners are attached to the window.
    </s:paragraph>
    <s:formal-item s:kind="examples">
      <s:formal-item-title>Main (Window and animator)</s:formal-item-title>
      <s:verbatim><xi:include href="example-fps-main-3.txt" parse="text"/></s:verbatim>
    </s:formal-item>
    <s:formal-item s:kind="diagram">
      <s:formal-item-title>Example screenshot</s:formal-item-title>
      <s:image s:source="images/example.png">Example screenshot</s:image>
    </s:formal-item>
  </s:subsection>

</s:section>